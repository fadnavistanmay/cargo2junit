# Recommened editor for this file: https://github.com/Microsoft/azure-pipelines-vscode

variables:
  CHANNEL: stable
  CACHE_SALT: 2
  RUSTCACHE_ROOT: $(Build.SourcesDirectory)/target
  CARGO_HOME: $(RUSTCACHE_ROOT)/rustcache/.cargo
  RUSTUP_HOME: $(RUSTCACHE_ROOT)/rustcache/.rustup
  SCCACHE_DIR: $(RUSTCACHE_ROOT)/rustcache/sccache
  SCCACHE_CACHE_SIZE: 1G
  CACHE_KEY_BASE: '"CACHE_SALT=$(CACHE_SALT)-$(Agent.JobName)-$(Agent.OS)-$(CHANNEL)-$(TARGET)"'
  TOOLS_TARGET: $(TARGET)
  system.debug: true
  POOL_NAME: ''
  VM_IMAGE: ''

stages:
- stage: Uncached
  displayName: 'Uncached'
  jobs:
    - job: uncached
    pool:
      name: $(POOL_NAME)
      vmImage: $(VM_IMAGE)
    strategy:
      matrix:

    # hosted agents
        vs2015-gnu:
          TARGET: x86_64-pc-windows-gnu
          TOOLS_TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: vs2015-win2012r2
        vs2017-gnu:
          TARGET: x86_64-pc-windows-gnu
          TOOLS_TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: vs2017-win2016
        vs2019-gnu:
          TARGET: x86_64-pc-windows-gnu
          TOOLS_TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: windows-2019
        vs2015-msvc:
          TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: vs2015-win2012r2
        vs2017-msvc:
          TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: vs2017-win2016
        vs2019-msvc:
          TARGET: x86_64-pc-windows-msvc
          VM_IMAGE: windows-2019
        osx-10.13-x86_64-apple-darwin:
          TARGET: x86_64-apple-darwin
          VM_IMAGE: macos-10.13
        osx-10.14-x86_64-apple-darwin:
          TARGET: x86_64-apple-darwin
          VM_IMAGE: macos-10.14
        x86_64-unknown-linux-gnu:
          TARGET: x86_64-unknown-linux-gnu
          VM_IMAGE: ubuntu-16.04
    steps:

      # # set up environment and restore cache
      # - bash: |
      #     rm -Rf "$RUSTCACHE_ROOT"
      #     echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
      #   displayName: clean state on private agents
      
      # # remove once https://github.com/microsoft/azure-pipelines-agent/pull/2400 is deployed
      # - bash: |
      #     mkdir "$RUSTCACHE_ROOT"
      #   displayName: create folder
      
      # - task: CacheBeta@0
      #   inputs:
      #     key: '$(CACHE_KEY_BASE) | $(Build.SourceVersion)'
      #     path: $(RUSTCACHE_ROOT)
      #     restoreKeys: |
      #       $(CACHE_KEY_BASE)

      # install tools
            # set up environment and restore cache
      - bash: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
          export PATH="$PATH:$(CARGO_HOME)/bin"
          echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
          which rustup && rustup -V
        displayName: Enusure rustup is installed
      - bash: |
          rustup toolchain install stable-$(TOOLS_TARGET)
          rustup default stable-$(TOOLS_TARGET)
          rustup update stable-$(TOOLS_TARGET)
          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
        displayName: Select toolchain for tools
      # - bash: |
      #     cargo install sccache
      #     echo '##vso[task.setvariable variable=RUSTC_WRAPPER]sccache'
      #     which sccache && sccache --version && sccache --show-stats
      #   displayName: Install sccache
      - bash: |
          cargo install cargo2junit
          which cargo2junit
        displayName: Install cargo2junit
      # - bash: |
      #     cargo install cargo-cache
      #     cargo cache
      #   displayName: Install cargo-cache
      # - bash: |
      #     cargo install cargo-update
      #     cargo install-update -a
      #   displayName: Ensure cargo-installed tools are up-to-date
      - bash: |
          rustup toolchain install $(CHANNEL)-$(TARGET)
          rustup default $(CHANNEL)-$(TARGET)
          rustup update $(CHANNEL)-$(TARGET)
          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
        displayName: Select toolchain for build

      # build and test
      - bash: |
          cargo build
        displayName: cargo build
      - bash: |
          cargo test -- -Z unstable-options --format json | tee test_results_debug.json
        displayName: cargo test

      - bash: |
          cargo build --release
        displayName: cargo build --release
      - bash: |
          cargo test --release -- -Z unstable-options --format json | tee test_results_release.json
        displayName: cargo test --release

      # store test results
      - bash: |
          cat test_results_debug.json | cargo2junit > test_results_debug_lkg.xml
          cat test_results_release.json | cargo2junit > test_results_release_lkg.xml
        displayName: convert to junit using LKG cargo2junit
        condition: succeededOrFailed()
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_debug_lkg.xml'
          testRunTitle: LKG_DEBUG_$(System.JobDisplayName)
          buildPlatform: LKG_DEBUG_$(System.JobDisplayName)
        condition: succeededOrFailed()
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_release_lkg.xml'
          testRunTitle: LKG_RELEASE_$(System.JobDisplayName)
          buildPlatform: LKG_RELEASE_$(System.JobDisplayName)
        condition: succeededOrFailed()

      # self-host test of cargo2junit: store test results using the cargo2junit that was just built
      - bash: |
          cat test_results_debug.json | ./target/debug/cargo2junit > test_results_debug.xml
          cat test_results_release.json | ./target/debug/cargo2junit > test_results_release.xml
        displayName: convert to junit using just-built cargo2junit
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_debug.xml'
          testRunTitle: DEBUG_$(System.JobDisplayName)
          buildPlatform: DEBUG_$(System.JobDisplayName)
        condition: succeededOrFailed()
      - task: PublishTestResults@2
        inputs: 
          testResultsFormat: 'JUnit'
          testResultsFiles: 'test_results_release.xml'
          testRunTitle: RELEASE_$(System.JobDisplayName)
          buildPlatform: RELEASE_$(System.JobDisplayName)
        condition: succeededOrFailed()
  
  - stage: CacheMiss
    displayName: 'CacheMiss'
    jobs:
      - job: cached
      pool:
        name: $(POOL_NAME)
        vmImage: $(VM_IMAGE)
      strategy:
        matrix:

       # # private agent for testing new agent code
      #     jerick-z440:
      #       TARGET: x86_64-pc-windows-msvc
      #       POOL_NAME: jerick-z440
          #jerick-z440-wsl:
           # TARGET: x86_64-unknown-linux-gnu
            #POOL_NAME: jerick-z440-wsl
            #AZP_CACHING_CONTENT_FORMAT: SingleTar
            #AZP_CACHING_TAR: 1
            #CACHE_KEY_BASE: '"TAR=$(AZP_CACHING_TAR)_CACHE_SALT=$(CACHE_SALT)-$(Agent.JobName)-$(Agent.OS)-$(CHANNEL)-$(TARGET)"'

       # # hosted agents
          vs2015-gnu:
            TARGET: x86_64-pc-windows-gnu
            TOOLS_TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2015-win2012r2
          vs2017-gnu:
            TARGET: x86_64-pc-windows-gnu
            TOOLS_TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2017-win2016
          vs2019-gnu:
            TARGET: x86_64-pc-windows-gnu
            TOOLS_TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: windows-2019
          vs2015-msvc:
            TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2015-win2012r2
          vs2017-msvc:
            TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2017-win2016
          vs2019-msvc:
            TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: windows-2019

       # known to need TAR support
          # osx-10.13-x86_64-apple-darwin:
          #   TARGET: x86_64-apple-darwin
          #   VM_IMAGE: macos-10.13
          # osx-10.14-x86_64-apple-darwin:
          #   TARGET: x86_64-apple-darwin
          #   VM_IMAGE: macos-10.14
          # x86_64-unknown-linux-gnu:
          #   TARGET: x86_64-unknown-linux-gnu
          #   VM_IMAGE: ubuntu-16.04

           vs2015-gnu-tar:
            TARGET: x86_64-pc-windows-gnu
            TOOLS_TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2015-win2012r2
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          vs2017-gnu-tar:
            TARGET: x86_64-pc-windows-gnu
            TOOLS_TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2017-win2016
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          vs2019-gnu-tar:
            TARGET: x86_64-pc-windows-gnu
            TOOLS_TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: windows-2019
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          vs2015-msvc-tar:
            TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2015-win2012r2
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          vs2017-msvc-tar:
            TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: vs2017-win2016
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          vs2019-msvc-tar:
            TARGET: x86_64-pc-windows-msvc
            VM_IMAGE: windows-2019
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          osx-10.13-x86_64-apple-darwin-tar:
            TARGET: x86_64-apple-darwin
            VM_IMAGE: macos-10.13
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          osx-10.14-x86_64-apple-darwin-tar:
            TARGET: x86_64-apple-darwin
            VM_IMAGE: macos-10.14
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
          x86_64-unknown-linux-gnu-tar:
            TARGET: x86_64-unknown-linux-gnu
            VM_IMAGE: ubuntu-16.04
            AZP_CACHING_CONTENT_FORMAT: SingleTar
            AZP_CACHING_TAR: 1
      steps:

         # set up environment and restore cache
        - bash: |
            rm -Rf "$RUSTCACHE_ROOT"
            echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
          displayName: clean state on private agents
        
        # remove once https://github.com/microsoft/azure-pipelines-agent/pull/2400 is deployed
        - bash: |
            mkdir "$RUSTCACHE_ROOT"
          displayName: create folder
        
        - task: CacheBeta@0
          inputs:
            key: '$(CACHE_KEY_BASE) | $(Build.SourceVersion)'
            path: $(RUSTCACHE_ROOT)
            restoreKeys: |
              $(CACHE_KEY_BASE)

         # install tools
        - bash: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
            which rustup && rustup -V
          displayName: Enusure rustup is installed
        - bash: |
            rustup toolchain install stable-$(TOOLS_TARGET)
            rustup default stable-$(TOOLS_TARGET)
            rustup update stable-$(TOOLS_TARGET)
            which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
          displayName: Select toolchain for tools
        - bash: |
            cargo install sccache
            echo '##vso[task.setvariable variable=RUSTC_WRAPPER]sccache'
            which sccache && sccache --version && sccache --show-stats
          displayName: Install sccache
        - bash: |
            cargo install cargo2junit
            which cargo2junit
          displayName: Install cargo2junit
        - bash: |
            cargo install cargo-cache
            cargo cache
          displayName: Install cargo-cache
        - bash: |
            cargo install cargo-update
            cargo install-update -a
          displayName: Ensure cargo-installed tools are up-to-date
        - bash: |
            rustup toolchain install $(CHANNEL)-$(TARGET)
            rustup default $(CHANNEL)-$(TARGET)
            rustup update $(CHANNEL)-$(TARGET)
            which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
          displayName: Select toolchain for build

         # build and test
        - bash: |
            cargo build
          displayName: cargo build
        - bash: |
            cargo test -- -Z unstable-options --format json | tee test_results_debug.json
          displayName: cargo test

         - bash: |
            cargo build --release
          displayName: cargo build --release
        - bash: |
            cargo test --release -- -Z unstable-options --format json | tee test_results_release.json
          displayName: cargo test --release

         # store test results
        - bash: |
            cat test_results_debug.json | cargo2junit > test_results_debug_lkg.xml
            cat test_results_release.json | cargo2junit > test_results_release_lkg.xml
          displayName: convert to junit using LKG cargo2junit
          condition: succeededOrFailed()
        - task: PublishTestResults@2
          inputs: 
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test_results_debug_lkg.xml'
            testRunTitle: LKG_DEBUG_$(System.JobDisplayName)
            buildPlatform: LKG_DEBUG_$(System.JobDisplayName)
          condition: succeededOrFailed()
        - task: PublishTestResults@2
          inputs: 
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test_results_release_lkg.xml'
            testRunTitle: LKG_RELEASE_$(System.JobDisplayName)
            buildPlatform: LKG_RELEASE_$(System.JobDisplayName)
          condition: succeededOrFailed()

         # self-host test of cargo2junit: store test results using the cargo2junit that was just built
        - bash: |
            cat test_results_debug.json | ./target/debug/cargo2junit > test_results_debug.xml
            cat test_results_release.json | ./target/debug/cargo2junit > test_results_release.xml
          displayName: convert to junit using just-built cargo2junit
        - task: PublishTestResults@2
          inputs: 
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test_results_debug.xml'
            testRunTitle: DEBUG_$(System.JobDisplayName)
            buildPlatform: DEBUG_$(System.JobDisplayName)
          condition: succeededOrFailed()
        - task: PublishTestResults@2
          inputs: 
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test_results_release.xml'
            testRunTitle: RELEASE_$(System.JobDisplayName)
            buildPlatform: RELEASE_$(System.JobDisplayName)
          condition: succeededOrFailed()
        # some cleanup before the cache stores
        - bash: |
            sccache --show-stats
            sccache --stop-server
          displayName: shutdown sccache
        - bash: |
            cargo cache
            cargo cache --autoclean
            cargo cache
          displayName: run cargo cache --autoclean

#jobs:
#  - job: uncached
#    pool:
#      name: $(POOL_NAME)
#      vmImage: $(VM_IMAGE)
#    strategy:
#      matrix:
#
#    # hosted agents
#        vs2015-gnu:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2015-win2012r2
#        vs2017-gnu:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2017-win2016
#        vs2019-gnu:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: windows-2019
#        vs2015-msvc:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2015-win2012r2
#        vs2017-msvc:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2017-win2016
#        vs2019-msvc:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: windows-2019
#        osx-10.13-x86_64-apple-darwin:
#          TARGET: x86_64-apple-darwin
#          VM_IMAGE: macos-10.13
#        osx-10.14-x86_64-apple-darwin:
#          TARGET: x86_64-apple-darwin
#          VM_IMAGE: macos-10.14
#        x86_64-unknown-linux-gnu:
#          TARGET: x86_64-unknown-linux-gnu
#          VM_IMAGE: ubuntu-16.04
#    steps:
#
#      # # set up environment and restore cache
#      # - bash: |
#      #     rm -Rf "$RUSTCACHE_ROOT"
#      #     echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
#      #   displayName: clean state on private agents
#      
#      # # remove once https://github.com/microsoft/azure-pipelines-agent/pull/2400 is deployed
#      # - bash: |
#      #     mkdir "$RUSTCACHE_ROOT"
#      #   displayName: create folder
#      
#      # - task: CacheBeta@0
#      #   inputs:
#      #     key: '$(CACHE_KEY_BASE) | $(Build.SourceVersion)'
#      #     path: $(RUSTCACHE_ROOT)
#      #     restoreKeys: |
#      #       $(CACHE_KEY_BASE)
#
#      # install tools
#            # set up environment and restore cache
#      - bash: |
#          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
#          export PATH="$PATH:$(CARGO_HOME)/bin"
#          echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
#          which rustup && rustup -V
#        displayName: Enusure rustup is installed
#      - bash: |
#          rustup toolchain install stable-$(TOOLS_TARGET)
#          rustup default stable-$(TOOLS_TARGET)
#          rustup update stable-$(TOOLS_TARGET)
#          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
#        displayName: Select toolchain for tools
#      # - bash: |
#      #     cargo install sccache
#      #     echo '##vso[task.setvariable variable=RUSTC_WRAPPER]sccache'
#      #     which sccache && sccache --version && sccache --show-stats
#      #   displayName: Install sccache
#      - bash: |
#          cargo install cargo2junit
#          which cargo2junit
#        displayName: Install cargo2junit
#      # - bash: |
#      #     cargo install cargo-cache
#      #     cargo cache
#      #   displayName: Install cargo-cache
#      # - bash: |
#      #     cargo install cargo-update
#      #     cargo install-update -a
#      #   displayName: Ensure cargo-installed tools are up-to-date
#      - bash: |
#          rustup toolchain install $(CHANNEL)-$(TARGET)
#          rustup default $(CHANNEL)-$(TARGET)
#          rustup update $(CHANNEL)-$(TARGET)
#          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
#        displayName: Select toolchain for build
#
#      # build and test
#      - bash: |
#          cargo build
#        displayName: cargo build
#      - bash: |
#          cargo test -- -Z unstable-options --format json | tee test_results_debug.json
#        displayName: cargo test
#
#      - bash: |
#          cargo build --release
#        displayName: cargo build --release
#      - bash: |
#          cargo test --release -- -Z unstable-options --format json | tee test_results_release.json
#        displayName: cargo test --release
#
#      # store test results
#      - bash: |
#          cat test_results_debug.json | cargo2junit > test_results_debug_lkg.xml
#          cat test_results_release.json | cargo2junit > test_results_release_lkg.xml
#        displayName: convert to junit using LKG cargo2junit
#        condition: succeededOrFailed()
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_debug_lkg.xml'
#          testRunTitle: LKG_DEBUG_$(System.JobDisplayName)
#          buildPlatform: LKG_DEBUG_$(System.JobDisplayName)
#        condition: succeededOrFailed()
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_release_lkg.xml'
#          testRunTitle: LKG_RELEASE_$(System.JobDisplayName)
#          buildPlatform: LKG_RELEASE_$(System.JobDisplayName)
#        condition: succeededOrFailed()
#
#      # self-host test of cargo2junit: store test results using the cargo2junit that was just built
#      - bash: |
#          cat test_results_debug.json | ./target/debug/cargo2junit > test_results_debug.xml
#          cat test_results_release.json | ./target/debug/cargo2junit > test_results_release.xml
#        displayName: convert to junit using just-built cargo2junit
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_debug.xml'
#          testRunTitle: DEBUG_$(System.JobDisplayName)
#          buildPlatform: DEBUG_$(System.JobDisplayName)
#        condition: succeededOrFailed()
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_release.xml'
#          testRunTitle: RELEASE_$(System.JobDisplayName)
#          buildPlatform: RELEASE_$(System.JobDisplayName)
#        condition: succeededOrFailed()
#
#      # some cleanup before the cache stores
#      # - bash: |
#      #     sccache --show-stats
#      #     sccache --stop-server
#      #   displayName: shutdown sccache
#      # - bash: |
#      #     cargo cache
#      #     cargo cache --autoclean
#      #     cargo cache
#      #   displayName: run cargo cache --autoclean
#  - job: cached
#    pool:
#      name: $(POOL_NAME)
#      vmImage: $(VM_IMAGE)
#    strategy:
#      matrix:
#
#    # # private agent for testing new agent code
#    #     jerick-z440:
#    #       TARGET: x86_64-pc-windows-msvc
#    #       POOL_NAME: jerick-z440
#        #jerick-z440-wsl:
#         # TARGET: x86_64-unknown-linux-gnu
#          #POOL_NAME: jerick-z440-wsl
#          #AZP_CACHING_CONTENT_FORMAT: SingleTar
#          #AZP_CACHING_TAR: 1
#          #CACHE_KEY_BASE: '"TAR=$(AZP_CACHING_TAR)_CACHE_SALT=$(CACHE_SALT)-$(Agent.JobName)-$(Agent.OS)-$(CHANNEL)-$(TARGET)"'
#
#    # # hosted agents
#        vs2015-gnu:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2015-win2012r2
#        vs2017-gnu:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2017-win2016
#        vs2019-gnu:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: windows-2019
#        vs2015-msvc:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2015-win2012r2
#        vs2017-msvc:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2017-win2016
#        vs2019-msvc:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: windows-2019
#
#    # known to need TAR support
#        # osx-10.13-x86_64-apple-darwin:
#        #   TARGET: x86_64-apple-darwin
#        #   VM_IMAGE: macos-10.13
#        # osx-10.14-x86_64-apple-darwin:
#        #   TARGET: x86_64-apple-darwin
#        #   VM_IMAGE: macos-10.14
#        # x86_64-unknown-linux-gnu:
#        #   TARGET: x86_64-unknown-linux-gnu
#        #   VM_IMAGE: ubuntu-16.04
#
#        vs2015-gnu-tar:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2015-win2012r2
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        vs2017-gnu-tar:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2017-win2016
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        vs2019-gnu-tar:
#          TARGET: x86_64-pc-windows-gnu
#          TOOLS_TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: windows-2019
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        vs2015-msvc-tar:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2015-win2012r2
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        vs2017-msvc-tar:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: vs2017-win2016
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        vs2019-msvc-tar:
#          TARGET: x86_64-pc-windows-msvc
#          VM_IMAGE: windows-2019
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        osx-10.13-x86_64-apple-darwin-tar:
#          TARGET: x86_64-apple-darwin
#          VM_IMAGE: macos-10.13
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        osx-10.14-x86_64-apple-darwin-tar:
#          TARGET: x86_64-apple-darwin
#          VM_IMAGE: macos-10.14
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#        x86_64-unknown-linux-gnu-tar:
#          TARGET: x86_64-unknown-linux-gnu
#          VM_IMAGE: ubuntu-16.04
#          AZP_CACHING_CONTENT_FORMAT: SingleTar
#          AZP_CACHING_TAR: 1
#    steps:
#
#      # set up environment and restore cache
#      - bash: |
#          rm -Rf "$RUSTCACHE_ROOT"
#          echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
#        displayName: clean state on private agents
#      
#      # remove once https://github.com/microsoft/azure-pipelines-agent/pull/2400 is deployed
#      - bash: |
#          mkdir "$RUSTCACHE_ROOT"
#        displayName: create folder
#      
#      - task: CacheBeta@0
#        inputs:
#          key: '$(CACHE_KEY_BASE) | $(Build.SourceVersion)'
#          path: $(RUSTCACHE_ROOT)
#          restoreKeys: |
#            $(CACHE_KEY_BASE)
#
#      # install tools
#      - bash: |
#          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
#          which rustup && rustup -V
#        displayName: Enusure rustup is installed
#      - bash: |
#          rustup toolchain install stable-$(TOOLS_TARGET)
#          rustup default stable-$(TOOLS_TARGET)
#          rustup update stable-$(TOOLS_TARGET)
#          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
#        displayName: Select toolchain for tools
#      - bash: |
#          cargo install sccache
#          echo '##vso[task.setvariable variable=RUSTC_WRAPPER]sccache'
#          which sccache && sccache --version && sccache --show-stats
#        displayName: Install sccache
#      - bash: |
#          cargo install cargo2junit
#          which cargo2junit
#        displayName: Install cargo2junit
#      - bash: |
#          cargo install cargo-cache
#          cargo cache
#        displayName: Install cargo-cache
#      - bash: |
#          cargo install cargo-update
#          cargo install-update -a
#        displayName: Ensure cargo-installed tools are up-to-date
#      - bash: |
#          rustup toolchain install $(CHANNEL)-$(TARGET)
#          rustup default $(CHANNEL)-$(TARGET)
#          rustup update $(CHANNEL)-$(TARGET)
#          which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
#        displayName: Select toolchain for build
#
#      # build and test
#      - bash: |
#          cargo build
#        displayName: cargo build
#      - bash: |
#          cargo test -- -Z unstable-options --format json | tee test_results_debug.json
#        displayName: cargo test
#
#      - bash: |
#          cargo build --release
#        displayName: cargo build --release
#      - bash: |
#          cargo test --release -- -Z unstable-options --format json | tee test_results_release.json
#        displayName: cargo test --release
#
#      # store test results
#      - bash: |
#          cat test_results_debug.json | cargo2junit > test_results_debug_lkg.xml
#          cat test_results_release.json | cargo2junit > test_results_release_lkg.xml
#        displayName: convert to junit using LKG cargo2junit
#        condition: succeededOrFailed()
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_debug_lkg.xml'
#          testRunTitle: LKG_DEBUG_$(System.JobDisplayName)
#          buildPlatform: LKG_DEBUG_$(System.JobDisplayName)
#        condition: succeededOrFailed()
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_release_lkg.xml'
#          testRunTitle: LKG_RELEASE_$(System.JobDisplayName)
#          buildPlatform: LKG_RELEASE_$(System.JobDisplayName)
#        condition: succeededOrFailed()
#
#      # self-host test of cargo2junit: store test results using the cargo2junit that was just built
#      - bash: |
#          cat test_results_debug.json | ./target/debug/cargo2junit > test_results_debug.xml
#          cat test_results_release.json | ./target/debug/cargo2junit > test_results_release.xml
#        displayName: convert to junit using just-built cargo2junit
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_debug.xml'
#          testRunTitle: DEBUG_$(System.JobDisplayName)
#          buildPlatform: DEBUG_$(System.JobDisplayName)
#        condition: succeededOrFailed()
#      - task: PublishTestResults@2
#        inputs: 
#          testResultsFormat: 'JUnit'
#          testResultsFiles: 'test_results_release.xml'
#          testRunTitle: RELEASE_$(System.JobDisplayName)
#          buildPlatform: RELEASE_$(System.JobDisplayName)
#        condition: succeededOrFailed()

#      # some cleanup before the cache stores
#      - bash: |
#          sccache --show-stats
#          sccache --stop-server
#        displayName: shutdown sccache
#      - bash: |
#          cargo cache
#          cargo cache --autoclean
#          cargo cache
#        displayName: run cargo cache --autoclean